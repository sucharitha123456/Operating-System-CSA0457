#include <stdio.h>
void sortProcesses(int n, int processes[], int burstTime[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (burstTime[i] > burstTime[j]) {
                int temp = burstTime[i];
                burstTime[i] = burstTime[j];
                burstTime[j] = temp;
                int tempID = processes[i];
                processes[i] = processes[j];
                processes[j] = tempID;
            }
        }
    }
}
void calculateWaitingTime(int n, int burstTime[], int waitingTime[]) {
    waitingTime[0] = 0; // First process has no waiting time
    for (int i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
    }
}
void calculateTurnaroundTime(int n, int burstTime[], int waitingTime[], int turnaroundTime[]) {
    for (int i = 0; i < n; i++) {
        turnaroundTime[i] = waitingTime[i] + burstTime[i];
    }
}
void calculateAverageTimes(int n, int processes[], int burstTime[]) {
    int waitingTime[n], turnaroundTime[n];
    float totalWaitingTime = 0, totalTurnaroundTime = 0;
    sortProcesses(n, processes, burstTime);
    calculateWaitingTime(n, burstTime, waitingTime);
    calculateTurnaroundTime(n, burstTime, waitingTime, turnaroundTime);
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\n", processes[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }
    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int processes[n], burstTime[n];
    printf("Enter the burst times for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1; 
        printf("Process P%d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }
    calculateAverageTimes(n, processes, burstTime);
    return 0;
}
