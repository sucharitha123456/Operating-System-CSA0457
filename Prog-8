#include <stdio.h>
#define MAX_PROCESSES 10
typedef struct {
    int pid;      
    int arrivalTime; 
    int burstTime;  
    int remainingTime; 
    int completionTime; 
    int turnaroundTime; 
    int waitingTime;   
} Process;
int main() {
    int n, timeQuantum;
    Process processes[MAX_PROCESSES];
    int currentTime = 0, completed = 0, queue[MAX_PROCESSES], front = 0, rear = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum: ");
    scanf("%d", &timeQuantum);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time and burst time for Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrivalTime, &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }
    queue[rear++] = 0; // Enqueue the first process
    while (completed < n) {
        int selectedProcess = queue[front++]; // Dequeue
        if (front == MAX_PROCESSES) front = 0;
        int executionTime = (processes[selectedProcess].remainingTime > timeQuantum) ? timeQuantum : processes[selectedProcess].remainingTime;
        currentTime += executionTime;
        processes[selectedProcess].remainingTime -= executionTime;
        for (int i = 0; i < n; i++) {
            if (i != selectedProcess && processes[i].arrivalTime <= currentTime &&
                processes[i].remainingTime > 0) {
                int found = 0;
                for (int j = front; j != rear; j = (j + 1) % MAX_PROCESSES) {
                    if (queue[j] == i) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
                    queue[rear++] = i; // Enqueue
                    if (rear == MAX_PROCESSES) rear = 0;
                }
            }
        }
        if (processes[selectedProcess].remainingTime > 0) {
            queue[rear++] = selectedProcess; // Re-enqueue
            if (rear == MAX_PROCESSES) rear = 0;
        } else {
            completed++;
            processes[selectedProcess].completionTime = currentTime;
            processes[selectedProcess].turnaroundTime = 
                processes[selectedProcess].completionTime - processes[selectedProcess].arrivalTime;
            processes[selectedProcess].waitingTime = 
                processes[selectedProcess].turnaroundTime - processes[selectedProcess].burstTime;
        }
    }
    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
               processes[i].pid,
               processes[i].arrivalTime,
               processes[i].burstTime,
               processes[i].completionTime,
               processes[i].turnaroundTime,
               processes[i].waitingTime);
    }
    return 0;
}
